最簡單的版本控制就是保留軟體不同版本的數份copy，並且適當編號。
缺點：
無法得知檔案版本之間的差異
無法得知備份的原因
無法追蹤修改者和修改的內容

版本記錄系統會追蹤每次更新的：
更動前 v.s. 更動後的程式碼
修改者
修改時間
修改原因（修改者需要自行撰寫 commit message）

集中版本控制：
共用同一個「檔案庫（repository）」，無論這個檔案庫是在同一部工作站、可透過網路存取的檔案系統上的本地端檔案庫、透過一個特定的通訊協定可以存取的遠端檔案庫。所有的成員都是共同存取同一份檔案庫，在一個伺服器進行，由中央管理存取權限「鎖上」檔案庫中的檔案，一次只能讓一個開發者進行工作。從集中式版本控制系統的設計觀點來看，它主要是要維持開發者之間保持同步的狀態。

分散式的版本控制系統的檔案庫允許不只一份，每個開發者都可以在自己的一部或多部開發機器上建立檔案庫。版本管理有關的資訊、例如提交訊息、版本變化的記錄等等，在分散式的版本控制系統中，都可以記錄在每一個檔案庫上，也因此，所以對版本控制系統的操作，都可以直接在本機端的檔案庫中進行，包括提交、分支、等等的操作。開發者可以進行「推（push）」的動作，其意義即將自身檔案庫中的變更（在其他檔案庫擁有者的授權之下）送至其他的檔案庫，也可以進行「拉（pull）」的動作。

Git可以把檔案的狀態作為更新歷史記錄保存起來。因此可以把編輯過的檔案復原到以前的狀態，也可以顯示編輯過內容的差異。
而且，當有人想將編輯過的舊檔案上傳到伺服器、覆蓋其他人的最新檔案時，系統會發出警告，因此可以避免在無意中覆蓋他人的編輯內容。

主線 (master) 上是穩定版本，而開發團隊繼續在分支上開發新功能，直到功能測試完畢後，才合併到主線上